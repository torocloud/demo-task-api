### 'application.properties' properties ###

# Set to true if reloading the 'application.properties' file to check for changes is allowed.
properties.reloadable=false

### MVC properties ###

# Where users will be redirected after a successful login.
# The value of this property must start with '/' or with 'http(s)'.
# mvc.login-success-url=

# Whether or not to always redirect to the location specified by 'mvc.login-success-url'.
mvc.login-success-url-always-use=false

# Set this property to use a Gloop template for Martini's dashboard.
# Format: <packageName>:<gloopTemplateNameSpace>.
# mvc.dashboard-template=


### Server port configuration ###
# The TCP port number on which the underlying HTTP connector will create a server socket
# and await incoming connections.
server.http.port=8080

# The TCP port number on which the underlying HTTPS connector will create a server socket
# and await incoming connections.
# server.https.port=8443


### Tomcat engine properties ###
# See document for more information: https://tomcat.apache.org/tomcat-9.0-doc/config/engine.html.

# The number of threads the Tomcat engine will use to start child host elements in parallel.
server.tomcat.engine.startStopThreads=1

### Tomcat host properties ###
# See document for more information: https://tomcat.apache.org/tomcat-9.0-doc/config/host.html.

# The number of threads this host will use to start child context elements in parallel.
server.tomcat.host.startStopThreads=1

### Tomcat HTTP/S properties ###
# Below are properties used to configure the attributes of the underlying HTTP connector.
# Supported attributes are documented here: https://tomcat.apache.org/tomcat-9.0-doc/config/http.html.

# Set to "on" by default to use HTTP/1.1 GZIP compression on response payloads in an attempt to save server bandwidth.
# The acceptable values for the parameter is "off" (disable compression), "on" (allow compression,
# which causes text data to be compressed), "force" (forces compression in all cases), or a numerical integer
# value (which is equivalent to "on", but specifies the minimum amount of data before the output is compressed).
# If the content-length is not known and compression is set to "on" or more aggressive, the output will also be
# compressed. If not specified, this attribute is set to "off".
server.tomcat.http.compression=on
server.tomcat.https.compression=on

# The maximum number of request processing threads to be created by the connector, 
# which therefore determines the maximum number of simultaneous requests that can be handled.
server.tomcat.http.maxThreads=200
#server.tomcat.https.maxThreads=200

# Sets the protocol to handle incoming traffic.
# server.tomcat.http.protocol=org.apache.coyote.http11.Http11AprProtocol
# server.tomcat.https.protocol=org.apache.coyote.http11.Http11AprProtocol

# If this connector is being used in a proxy configuration, 
# configure this attribute to specify the server port to be returned for calls to request.getServerPort().
server.tomcat.http.proxyPort=-1
#server.tomcat.https.proxyPort=-1

# Additional characters in URI paths to be allowed by Tomcat in unencoded form.
# The value may be a combination of any of the following characters " < > [ \ ] ^ ` { | } .
# Any other characters present in the value will be ignored.
server.tomcat.http.relaxedPathChars=[]|
#server.tomcat.https.relaxedPathChars=[]|

# Additional characters in URI query strings to be allowed by Tomcat in unencoded form.
# The value may be a combination of any of the following characters " < > [ \ ] ^ ` { | } .
# Any other characters present in the value will be ignored.
server.tomcat.http.relaxedQueryChars=[]|{}^&#x5c;&#x60;&quot;&lt;&gt;
#server.tomcat.https.relaxedQueryChars=[]|{}^&#x5c;&#x60;&quot;&lt;&gt;

# If set, the value for this attribute overrides any Server header set by a web application. 
# If not set, any value specified by the application is used. 
# If the application does not specify a value then no Server header is set.
server.tomcat.http.server-name=Martini Runtime
server.tomcat.https.server-name=Martini Runtime

# server.tomcat.https.keystoreFile=/path/to/file.jks

# server.tomcat.https.keystorePass=secret

# Name of the file that contains the server certificate.
# server.tomcat.https.SSLCertificateFile=/path/to/file.crt

# Name of the file that contains the server private key.
# server.tomcat.https.SSLCertificateKeyFile=/path/to/file.pem

# The SSL protocol(s) to use (a single value may enable multiple protocols).
# server.tomcat.https.sslProtocol=TLSv1+TLSv1.1+TLSv1.2

### Tomcat RemoteIpValve properties ###
# Read more about the RemoteIpValve class in: 
# https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/valves/RemoteIpValve.html.

# Indicates whether or not to use a RemoteIpValve.
server.tomcat.valve.remote-ip-valve.enabled=false

# Regular expression that a proxy's IP address must match to be considered an internal proxy.
server.tomcat.valve.remote-ip-valve.internalProxies=10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}| 169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}| 172\.1[6-9]{1}\.\d{1,3}\.\d{1,3}|172\.2[0-9]{1}\.\d{1,3}\.\d{1,3}| 172\.3[0-1]{1}\.\d{1,3}\.\d{1,3}| 0:0:0:0:0:0:0:1|::1

# Name of the HTTP header created by this valve to hold the list of proxies that have been processed
# in the incoming remoteIpHeader.
server.tomcat.valve.remote-ip-valve.proxiesHeader=x-forwarded-by

# Name of the HTTP header read by this valve that holds the list of traversed IP addresses
# starting from the requesting client.
server.tomcat.valve.remote-ip-valve.remoteIpHeader=x-forwarded-for

# Regular expression that a proxy's IP address must match to be considered an trusted proxy.
server.tomcat.valve.remote-ip-valve.trustedProxies=

# Set to true to set the request attributes used by AccessLog implementations
# to override the values returned by the request for remote address, remote host, server port and protocol. 
# Request attributes are also used to enable the forwarded remote address to be displayed
# on the status page of the Manager web application. 
# If not set, the default value of true will be used.
server.tomcat.valve.remote-ip-valve.requestAttributesEnabled=true

### Tracker properties ###

# If this value isn't empty, every document in tracker will have a property called 'Martini Server' with this value.
# This is useful for determining which server processed a request in a Martini Runtime cluster.
# Possible variables here are $hostname, $ip and $port.
# The value of $port is the value of the 'server.http.port' property above.
# The value of $ip is the first IP address that isn't 127.0.0.1; otherwise it's 127.0.0.1.
tracker.machine-name=Martini Runtime@$hostname:$port ($ip)

# Setting this to false will configure tracker to disable document-parsing.
# This behavior is only applicable if Solr is set to run on cloud or remote.
# By default, Tracker parses every binary document that it receives and by doing so,
# allows said documents to be queryable.
# Disabling its parsing capabilities could potentially result in the content of binary documents to be unsearchable
# (which should not be confused with unsaved or un-indexed).
tracker.parse-documents=true

# Google Maps API key to use when showing coordinates of a Tracker document.
# If the value is empty, maps will not be shown.
tracker.google-maps-api-key=

# Maximum number of bytes to include for Tracker indexing content.
# An exception will be thrown when this limit has been reached.
# Setting this to -1 will disable the limit. 
# Setting this to 0 disables indexing.
# If unprovided, defaults to 10485760.
tracker.indexing-limit=10485760

# Flag indicating whether or not the associated Solr document should also be deleted
# when a Tracker document is deleted.
tracker.delete-solr-counterpart=true

### Monitor properties ###

# Determines whether or not all service invocations will be logged.
monitor.log-all=false

# According to international standard ISO 8601, Monday is the first day of the week.
# It is followed by Tuesday, Wednesday, Thursday, Friday, and Saturday.
# Sunday is the 7th and final day.
# Although this is the international standard, several countries, including the United States and Canada,
# consider Sunday as first day of the week.
# To explicitly configure the first day of week in Martini Runtime Monitor service,
# set this property's value to the corresponding integer value of the day you want to use.
# Use 1 for Monday, and then increment in order for the rest; until 7 for Sunday.
# The default value is Monday.
monitor.first-weekday=1

# Flag indicating whether or not the associated Solr document should also be deleted
# when a Monitor document is deleted.
monitor.delete-solr-counterpart=true

### Broker properties ###

# Refers to the basename (extension omitted) of any XML broker configuration file under the /conf/broker directory,
# which Martini will use to configure its message broker.
# By default, the following files (extension omitted) can be found under said directory:
# activemq-embedded, activemq-external, artemis-external, and rabbitmq.
# If these files are left as is, any of these values can be used for this property.
# If a custom configuration file is used, the file must have a '.xml' file extension.  
# TORO also recommends naming the file distinctively for easier identification.
jms.configuration-file=activemq-embedded

# Prefix added to mitigate overlapping JMS destinations.
jms.destination-prefix=

# Client ID to use for JMS connection.
# Set a client ID if you need to use durable subscribers on topics.
# If a client ID is not set, a random value is used.
# Using a random value will disable durable topic subscription
# because a different client ID is used upon connection restart.
jms.client-id=toroMartini

# The maximum limit for the number of cached sessions per session acknowledgement type.
jms.session-cache-size=4

# ObjectMessage objects depend on Java serialization of marshal/unmarshal object payload.
# This process is generally considered unsafe as malicious payload can exploit the host system.
# For this reason, most JMS providers force users to explicitly whitelist packages
# that can be exchanged using ObjectMessage messages.
# Use this property to specify whitelisted packages; each separated by a comma.
# A value of '*' means all packages will be whitelisted.
jms.trusted-packages=java.lang,org.codehaus.groovy.runtime,javax.security,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper,io.toro.martini,io.toro.gloop

### ActiveMQ properties ###

# In local mode, the ActiveMQ broker can be remotely connected to using this URL.
# In remote mode, Martini uses this URL to connect to a remote broker.
# When in remote mode, the URL should be prefixed with 'failover:'.
# If unspecified, 'tcp://0.0.0.0:61616' is used.
activemq.uri=tcp://0.0.0.0:61616?closeAsync=false&wireFormat.maxInactivityDuration=0

# Sets the login when connecting to a remote ActiveMQ broker.
# If unspecified, Martini will use 'guest' for the login.
activemq.username=guest

# Sets the password when connecting to a remote ActiveMQ broker.
# If unspecified, Martini will use 'guest' for the password.
activemq.password=guest

# The maximum amount of times the message is redelivered to the queue
# before it is thrown to the DLQ (Dead Letter Queue).
# If unspecified, this is set to 6.
# Use -1 to set it to an unlimited amount.
activemq.maximum-redeliveries=5

# The amount of time (in milliseconds) before a message is to be redelivered.
# If unspecified, this is set to -1.
activemq.maximum-redelivery-delay=5000

# Set to true to acknowledge receipt of messages back to the broker in batches (to improve performance).
# If unspecified, defaults to 'true'.
activemq.optimize-acknowledge=true

# The percentage (%) threshold applied to Martini's total allocated JVM memory which,
# when exceeded, will cause the destination's cursor to either block or be written
# to disk while waiting to be processed.
#
# Be careful when setting the value as this may lead to OOM if improperly configured.
activemq.cursor-memory-high-water-mark=25

# If true, ActiveMQ connections will send messages asynchronously.
# This adds a massive performance boost, but could lead to message loss
# since there is no guarantee that messages have been sent or not.
# If unspecified, defaults to 'true'.
activemq.send-asynchronously=true

# If true, advisory topics are created which can be used to receive information
# regarding what is happening on your JMS provider,
# along with what's happening with producers, consumers and destinations.
# If unspecified, defaults to 'false'.
activemq.watch-topic-advisories=false

# A hint to set the maximum size of the message data logs.
# By default, this is set to 32MB.
activemq.maximum-data-log-size=33554432

### WebSocket properties ###

# The maximum number of stacktrace elements to publish via web socket on error.
websocket.event.exception.max-stack-trace=10

# The number of events to accumulate before publishing them as a single batch event.
websocket.event.file.threshold=500

# The maximum amount of time in milliseconds to wait before sending an event.
websocket.event.file.wait=200

# The interval in milliseconds for checking whether or not the maximum wait time has been reached.
websocket.event.file.interval=100

# If unspecified, defaults to the number of processors, multiplied by two.
# websocket.channel.core-pool-size=

# If unspecified, defaults to the number of processors, multiplied by four.
# websocket.channel.max-pool-size=

# If unspecified, defaults to (2^31)-1, which is equivalent to Integer.MAX_VALUE.
# websocket.channel.queue-capacity=

# If unspecified, defaults to 60.
# websocket.channel.keep-alive-seconds=

### Solr properties ###

# This property specifies which mode to run Solr on.
# Valid values are: local, remote, and cloud.
# Set this property to 'local' to use an embedded version of Solr.
# Set this property to 'remote' to use a standalone instance of Solr.
# Set this property to 'cloud' to use a standalone instance of SolrCloud.
solr.mode=local

# This property must be specified when using a remote or cloud instance of Solr.
# 
# If using a standalone instance of Solr, this is the Solr instance's URL.
# The URL should be in the form of: http://<HOST>:<PORT>/solr.
# For example: http://localhost:8983/solr.
#
# If using SolrCloud, this is the host and port of your ZooKeeper instance.
# The URL should be in the form: <HOST>:<PORT>.
# For example: localhost:8983.
# The URL could also have an optional chroot: <HOST>:<PORT>/<CHROOT>.
# For example: localhost:8983/mysolrchroot.
# For multiple ZooKeeper instances, provide the host-port pairs separated by comma.
solr.url=http://localhost:8983/solr

# For a Solr cluster used by multiple instances of Martini Runtime,
# you can set this property to prevent overlapping core names.
solr.core-prefix=

# The username Martini will use for basic authentication in order to access the configured SolrCloud instance,
# Used only when running on SolrCloud mode.
solr.user=

# These password Martini will use for basic authentication in order to access the configured SolrCloud instance.
# Used only when running on SolrCloud mode.
solr.password=

# To run Solr in SSL mode, supply the following properties below:
# solr.keystore-file=
# solr.keystore-pass=

# A boolean property that, when set to true,
# configures Martini to add an embedded Solr server that will serve as a fallback server.
# This is particularly useful when dynamically creating cores,
# because there is no API to do such in a standalone Solr or SolrCloud instance.
# This property is ignored in 'local' Solr mode.
solr.enable-embedded-fallback=

# This sets the maximum number of facets per search.
# Set to -1 for unlimited number of facets.
solr.search.facet-limit=20

# When doing re-indexing, Martini fetches Solr documents from the configured Solr database.
# This property allows you to specify the number of documents Martini could fetch per batch.
solr.reindexing.batch-size=50

### HSTS properties ###
# The HTTP Strict-Transport-Security response header (often abbreviated as HSTS)
# lets a web site tell browsers that it should only be accessed using HTTPS, instead of using HTTP.

# If set to true, enables the HSTS filter.
# This means Martini will add a 'Strict-Transport-Security' header to its responses. 
hsts.enabled=false

# If set to true, includes a 'includeSubDomains' directive to the HSTS header.
hsts.include-subdomains=false

# If set to true, adds a 'preload' directive to the HSTS header.
hsts.preload=false

# Sets the value of the 'max-age' directive in the HSTS header.
# If unspecified, defaults to '86400'.
hsts.max-age=86400

### OAuth properties ###

# The access token validity period for the OAuth client in seconds.
# If unprovided, defaults to '3600'.
oauth.access-token-validity=3600

# Client ID that OAuth clients must use when authenticating to Martini Runtime.
# If unprovided, defaults to 'TOROMartini'.
oauth.client-id=TOROMartini

# Client ID that Oauth clients must use when authenticating to Martini Runtime.
# If unprovided, defaults to 'TOROMartini'.
oauth.client-secret=TOROMartini

### API Explorer ###
# API Explorer is a tool that generates visual and interactive documentation for all of your Martini-based RESTful APIs.
# The properties below will be used in building the Swagger definition of Martini's built in Admin RESTful API.

# The host to use for all Martini Runtime API calls.
# If unspecified, the host is generated at runtime.
api-explorer.host=

# The title of the application.
api-explorer.title=Martini Runtime API

# A short description of the application.
# CommonMark syntax MAY be used for rich text representation.
api-explorer.description=Martini Runtime API

# The contact information for the exposed API.
api-explorer.contact=

# The license information for the exposed API.
api-explorer.license=

# A URL to the license used for the API.
# Must be in the format of a URL.
api-explorer.license-url=

### FTP properties ###
# Below are properties used to configure the FTP service for FTP server endpoints. 

# Set the passive ports to be used for data connections.
# Ports can be defined as single ports, closed, or open ranges.
# Multiple definitions can be separated by commas, for example:
# 0 : use any available port
# 2300 : only use port 2300 as the passive port
# 2300-2399 : use all ports in the range
# 2300- : use all ports larger than 2300
# 2300, 2305, 2400- : use 2300 or 2305 or any port larger than 2400
ftp.passive-ports=0

# When the FTP server is behind a NAT, it needs to know its external IP address
# so it can provide it to the client in a response to a PASV command.
# This property sets the passive address that will be returned to clients on the PASV command.
ftp.passive-external-address=localhost

# File system location where uploaded file contents are actually written to.
# Defaults to ${tmpdir}/ftproot if unprovided.
# ${tmpdir} is the path returned by the 'java.io.tmpdir' system property.
ftp.physical-directory=

### CORS properties ###
# The properties below are intended to configure CORS support for
# Martini Runtime's Admin REST API, and published user-created REST APIs.

# Boolean flag indicating whether to enable or disable CORS support.
# If unspecified, defaults to 'false'.
cors.enabled=false

# Specifies origins that are allowed access to the resource (which in this case, are Martini's APIs).
# Set to '*' to enable access from any origin.
# Otherwise, set this property's value to a comma-separated list of whitelisted origins.
# The value(s) provided will be supplied as the value of the 'Access-Control-Allow-Origin' header.   
cors.allowed-origins=*

# A comma-separated list of HTTP methods that can be used to access resources using cross-origin requests.
# The value(s) provided will be supplied as the value of the 'Access-Control-Allow-Methods' header.
# If unspecified, defaults to 'GET, POST, HEAD, OPTIONS, DELETE'.
cors.allowed-methods=GET, POST, HEAD, OPTIONS, PUT, DELETE

# A comma separated list of request headers that can be used when making an actual request.
# These headers will be returned as part of the 'Access-Control-Allow-Headers' header in a pre-flight response.
# If unspecified, defaults to 'Origin, Accept, X-Requested-With, Content-Type,
# Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'.
# A value of '*' means all headers in a pre-flight request will be accepted but
# you still need to explicitly add headers here for them to be written in the response if they're not in the request.
cors.allowed-headers=Origin, X-Requested-With, Content-Type, Accept, Authorization, *

# A comma separated list of headers other than simple response headers that browsers are allowed to access.
# These are values that will be included as part of the 'Access-Control-Expose-Headers' response header
# in the pre-flight response.
# If unspecified, non-simple headers will not be exposed at all.
cors.exposed-headers=Access-Control-Allow-Origin, Access-Control-Allow-Credentials

# The amount of seconds a browser is allowed to cache the result of a pre-flight request.
# This value will be included as the value of the 'Access-Control-Max-Age' header in a pre-flight response.
# A negative value will prevent the CORS filter from adding this response header to pre-flight responses.
# If unspecified, defaults to '1800'.
cors.max-age=1800

# A boolean flag that indicates whether the resource supports user credentials.
# This flag is exposed as part of the 'Access-Control-Allow-Credentials' header in a pre-flight response.
# It helps a browser determine whether or not an actual request can be made using credentials.
# If unspecified, defaults to 'true'.
cors.allow-credentials=true

# A boolean flag that indicates whether or not CORS-specific attributes should be added
# to 'HttpServletRequest' objects or not.
# If unspecified, defaults to 'true'.
cors.decorate-requests=true

### Service group properties ###

# Configures the caching strategy Martini will use for service groups.
# Valid values are:
# event-aware:
#     Triggers the cache cleaner if file is modified via Martini Online or Desktop. 
#     Directly modifying the file from file system will not trigger the cache cleaner.
#     This can result to memory leaks or outdated service group objects.
# interval:
#     Uses a scheduler-based cache cleaner. Checks for a file's modified attribute at a fixed interval,
#     specified using the 'service-group.caching-interval' property.
#     With this option, Martini also checks for modified files when attempting to get service groups from cache.
#     Unlike the 'event-aware' cache strategy, Martini can still update the cache with this strategy,
#     even if a file is directly modified via the file system.
# watch-service:
#     Uses Java's WatchService API to detect file changes and update the cache accordingly.
#     Unlike the 'event-aware' cache strategy, Martini can still update the cache with this strategy,
#     even if a file is directly modified via the file system.
service.group.cache-strategy=event-aware

# The interval in milliseconds Martini uses to check for service group cache updates.
# This property is only used when 'service-group.caching-strategy' is set to 'event-aware'.
# If unspecified, the interval is set to 30 seconds.
service.group.cache-interval=30000

### Service properties ###

# This property dictates how long a service should execute before timing out.
# The value should be in milliseconds.
# service.timeout=30000

# This property dictates the size of the thread pool. No limit will be set if this property is disabled.
# Do note that by default, this will use CachingThreadPool which can be memory intensive.
# Packages should be reloaded for the changes to be picked up.
# service.threads=5

### 'Package properties' properties ###

# Defines how package properties are checked for changes. 
# Valid values are: 'none', 'always-check', and 'scheduled'.
# Set to 'none' to disregard changes.
# Set to 'always-check' to always check the properties file for changes.
# Set to 'scheduled' to perform periodic checking.
package.properties.reload-strategy=always-check

# Defines the interval between properties file checks, in milliseconds.
# This property is only used when 'properties.package.reload-strategy' is set to 'scheduled'.
package.properties.reload-interval=60000

# Allows you to add a prefix to your package.properties files.
# If provided, Martini will look for package properties in <prefix>.package.properties files.
# If empty, Martini will look for package properties in package.properties files instead instead.
package.properties.prefix=

### Package properties ###
# This section contains properties which affect how all packages are processed by Martini.

# Configures the caching strategy for package configuration files (package.xml).
# Valid values are:
# simple-map:
#     Martini will use a simple map to cache package configuration files using file paths as key.
# last-modified:
#     Martini will check for the last modified date to determine when to update the cache.
# directory-watcher:
#     Use a directory watcher to check for modified files in order to determine when to update the cache.
package.config-cache-strategy=simple-map

# If unspecified, defaults to '20'.
package.info-cache-size=20

# When a package is currently being processed, under the covers, Martini locks the package to prevent
# concurrent threads trying to manipulate the package lifecycle at the same time.
# 
# This property specifies the concurrency lock timeout in milliseconds.
# The timeout specifies how long other threads will wait for a package lifecycle
# to finish before throwing a timeout exception.
# 
# Any value below or equal to 0 will cause the package manager to wait indefinitely.
package.concurrency-lock-timeout=120000

# Specifies the home directory of all Martini packages.
# 
# This is useful when Martini Runtime is set up in a cluster,
# and you want multiple instances using the same set of packages and endpoints.
# Setting this property is also useful when you want the packages stored outside of the Martini Runtime installation.
# This allows you to easily upgrade Martini Runtime without having to move all your files.
#
# If unspecified, defaults to the 'packages' directory under Martini's installation directory.
# package.home=

### Email client properties ###

# Refers to the maximum number of entries to retain in cache for JavaMailSenders.
# A JavaMailSender is cached for every authorization URL.
# If cache exceeds the limit, entries that are less likely to be used again are evicted.
mail.client.sender-cache-size=50

# Refers to length of time in seconds before a cache entry expires in cache for JavaMailSenders.
# A JavaMailSender is cached for every authorization URL.
mail.client.sender-cache-timeout=600

### JavaMail Session properties ###
# The properties below are used when creating JavaMail Session objects. 
# You can add additional JavaMail Session properties.

mail.properties.mail.debug=false

mail.properties.mail.imap.connectiontimeout=10000
mail.properties.mail.imap.timeout=10000
mail.properties.mail.imap.writetimeout=10000

mail.properties.mail.imaps.connectiontimeout=10000
mail.properties.mail.imaps.timeout=10000
mail.properties.mail.imaps.writetimeout=10000

mail.properties.mail.pop3.connectiontimeout=10000
mail.properties.mail.pop3.timeout=10000
mail.properties.mail.pop3.writetimeout=10000

mail.properties.mail.pop3s.connectiontimeout=10000
mail.properties.mail.pop3s.timeout=10000
mail.properties.mail.pop3s.writetimeout=10000

mail.properties.mail.smtp.connectiontimeout=10000
mail.properties.mail.smtp.timeout=10000
mail.properties.mail.smtp.writetimeout=10000

mail.properties.mail.smtps.connectiontimeout=10000
mail.properties.mail.smtps.timeout=10000
mail.properties.mail.smtps.writetimeout=10000

### Throttling properties ###

# The type of datastore to use for Martini's throttling feature.
# Possible values:
# memory:
#    Uses in-memory datastore.
# redis:
#     Uses a Redis datastore.
throttling.datastore-type=memory

# Specifies how long in milliseconds Martini will wait for the Redis server
# to load the throttling script before timing out.
throttling.redis.script.load-timeout=10000

# A boolean property for specifying whether or not Martini should upload the throttling script on start-up. 
throttling.redis.script.load-eagerly=false

### API Properties ###

# The transfer protocol to use for all Martini Runtime API calls.
# Valid values are http, https, and request.
# (Previously 'api-explorer.schemes')
api.schemes=

### RESTful API properties ###

# The default request and response format [used] in:
# - Service invoker forms
# - Generated API specification's examples (from Gloop REST APIs)
# Valid values are: 'xml' and 'json'. 
api.rest.default-content-type=json

# The base path for all published Gloop API, Gloop ad hoc, and Spring-annotated web services written in Groovy.
api.rest.base-path=api

# The base path for published gloop api documentation
api.doc.base-path=doc

# Specifies whether to enable or disable Basic authentication for published RESTful APIs in Martini.
api.rest.enable-basic-authentication=false

# Locale used when resolving API exception messages.
api.rest.locale=en

### Marshaller properties ###

# The class of the object convert to use.
# The object convert is used to serialize and deserialize objects.
# The specified class should subclass 'io.toro.martini.xml.XMLObjectConverter'.
marshaller.converter-class=io.toro.martini.xml.xstream.JaxbXstreamJacksonObjectConverter

# A boolean property that indicates whether or not to format produced XML or JSON data with linefeeds and indentation.
marshaller.pretty-print=true

# Determines whether or not the configured object converter will cache used 'Marshaller's and 'Unmarshaller's.
marshaller.enable-cache=true

### Hibernate properties ###

# DDL mode.
# Supported values include 'create', 'create-drop', 'update', 'none' and 'validate'.
#
# This setting tells hibernate what to do on startup with regards to comparing the underlying database schema
# to what's configured in Martini Runtime.
#
# For development, the default setting of 'update' is fine. 
# In production it's recommended to change this setting to 'none' once your databases and schemas/tables
# have been configured and created.
#
# Defaults to 'none' when unspecified.
hibernate.ddl-auto=update

### Bitronix transaction manager properties ###
# See: https://github.com/bitronix/btm/wiki/Transaction-manager-configuration#Transaction_Engine_Settings.

# The unique instance ID to be used by Bitronix transaction manager.
# For additional configurations, see 'jndi.xml'.
bitronix.tm.serverId=

### Scheduler endpoint properties ###

# A boolean property indicating whether or not Martini will wait
# for all scheduler endpoints to shutdown gracefully upon instance shutdown.
# See: http://www.quartz-scheduler.org/api/2.3.0/org/quartz/Scheduler.html#shutdown-boolean-.
endpoint.scheduler.graceful-shutdown=true

### Other properties ###

# The TCP/IP port number on which this server waits for a remote shutdown command.
# Set to -1. to disable.
shutdown-port=8081

# The license key to use from Maxmind to access GeoIP services
geoip.maxmind-license-key=